# Docker-specific configuration for Spring Boot application

# Database Configuration for PostgreSQL
spring.datasource.url=${SPRING_DATASOURCE_URL:jdbc:postgresql://localhost:5432/quiz_db}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME:quiz_user}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD:quiz_password}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA/Hibernate Configuration
spring.jpa.database-platform=${SPRING_JPA_DATABASE_PLATFORM:org.hibernate.dialect.PostgreSQLDialect}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO:update}
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.jdbc.lob.non_contextual_creation=true

# Actuator endpoints for health checks
management.endpoints.web.exposure.include=health,info
management.endpoint.health.show-details=when-authorized
management.health.defaults.enabled=true

# Server Configuration
server.port=8080
server.error.include-message=always
server.error.include-binding-errors=always

# Logging Configuration
logging.level.com.example.demo=INFO
logging.level.org.springframework.security=DEBUG
logging.pattern.file=%d{ISO8601} [%thread] %-5level %logger{36} - %msg%n
logging.file.name=/app/logs/application.log

# JWT Configuration (if using JWT authentication)
jwt.secret=${JWT_SECRET:myVerySecureSecretKeyThatIsAtLeast256BitsLongForJWTSecurity123456789}
jwt.expiration=${JWT_EXPIRATION:86400}

# CORS Configuration
spring.web.cors.allowed-origins=http://frontend:80,http://localhost:3000
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
