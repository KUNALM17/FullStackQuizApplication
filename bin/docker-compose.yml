
services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: quiz-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: quiz_db
      POSTGRES_USER: quiz_user
      POSTGRES_PASSWORD: quiz_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U quiz_user -d quiz_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Spring Boot Backend
  backend:
    build: 
      context: .
      dockerfile: Dockerfile
    container_name: quiz-backend
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://database:5432/quiz_db
      SPRING_DATASOURCE_USERNAME: quiz_user
      SPRING_DATASOURCE_PASSWORD: quiz_password
      SPRING_JPA_HIBERNATE_DDL_AUTO: update
      SPRING_JPA_DATABASE_PLATFORM: org.hibernate.dialect.PostgreSQLDialect
      JWT_SECRET: myVerySecureSecretKeyThatIsAtLeast256BitsLongForJWTSecurity123456789
      JWT_EXPIRATION: 86400
    depends_on:
      database:
        condition: service_healthy
    networks:
      - quiz-network
    volumes:
      - ./logs:/app/logs
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # React Frontend
  frontend:
    build: 
      context: ./quiz-frontend
      dockerfile: Dockerfile
    container_name: quiz-frontend
    restart: unless-stopped
    ports:
      - "3000:80"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - quiz-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3

# Networks
networks:
  quiz-network:
    driver: bridge

# Volumes
volumes:
  postgres_data:
    driver: local
