package com.example.demo.Dao;

import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

import com.example.demo.Model.Quiz;

/**
 * 🎯 QuizDao - The Database Gateway for Quizzes!
 * 
 * This Data Access Object is our connection to the quiz database table.
 * It's like a specialized filing cabinet that stores and retrieves quizzes.
 * 
 * While it looks simple, this interface automatically provides us with:
 * - save(quiz) - Create a new quiz or update existing one 💾
 * - findById(id) - Find a specific quiz by its ID 🔍
 * - findAll() - Get all quizzes in the system 📋
 * - deleteById(id) - Remove a specific quiz 🗑️
 * - deleteAll() - Clear all quizzes (use with caution!) 🧹
 * - count() - How many quizzes do we have? 🔢
 * - existsById(id) - Does this quiz exist? ✅
 * 
 * All of these powerful methods are automatically generated by Spring JPA!
 * We inherit them from JpaRepository<Quiz, Integer> where:
 * - Quiz = The entity type we're working with
 * - Integer = The type of the primary key (id field)
 * 
 * @author KUNAL M
 * @version 1.0
 */
@Repository
public interface QuizDao extends JpaRepository<Quiz, Integer> {
	
	// 🎭 This interface is intentionally simple!
	// All the power comes from the inherited JpaRepository methods.
	// If we needed custom queries (like finding quizzes by title or category),
	// we would add them here with @Query annotations.
	
	// Example of what we could add if needed:
	// List<Quiz> findByTitle(String title);
	// List<Quiz> findByTitleContaining(String keyword);
}
